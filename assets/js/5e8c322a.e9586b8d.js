"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7597],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return c}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=p(t),c=o,k=d["".concat(s,".").concat(c)]||d[c]||m[c]||l;return t?a.createElement(k,i(i({ref:n},u),{},{components:t})):a.createElement(k,i({ref:n},u))}));function c(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,i=new Array(l);i[0]=d;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var p=2;p<l;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7926:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var a=t(7462),o=t(3366),l=(t(7294),t(3905)),i=["components"],r={id:"index",title:"bluehawk",slug:"/api/",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null},s="Bluehawk",p={unversionedId:"api/index",id:"api/index",isDocsHomePage:!1,title:"bluehawk",description:"Bluehawk is a markup processor for extracting and manipulating arbitrary code.",source:"@site/docs/api/index.md",sourceDirName:"api",slug:"/api/",permalink:"/bluehawk/api/",editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"index",title:"bluehawk",slug:"/api/",sidebar_label:"Readme",sidebar_position:0,custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"Plugins",permalink:"/bluehawk/plugins"},next:{title:"Exports",permalink:"/bluehawk/api/modules"}},u=[{value:"Example",id:"example",children:[{value:"Videos",id:"videos",children:[],level:3}],level:2},{value:"Install",id:"install",children:[],level:2},{value:"Bluehawk Commands",id:"bluehawk-commands",children:[{value:"Attribute Lists",id:"attribute-lists",children:[],level:3},{value:"Snippet",id:"snippet",children:[],level:3},{value:"State",id:"state",children:[],level:3},{value:"State-Uncomment",id:"state-uncomment",children:[],level:3},{value:"Uncomment",id:"uncomment",children:[],level:3},{value:"Replace",id:"replace",children:[],level:3},{value:"Emphasize",id:"emphasize",children:[],level:3},{value:"Remove",id:"remove",children:[],level:3}],level:2},{value:"CLI",id:"cli",children:[{value:"Commands",id:"commands",children:[{value:"Snip",id:"snip",children:[],level:4},{value:"Copy",id:"copy",children:[],level:4},{value:"Check",id:"check",children:[],level:4}],level:3},{value:"Flags",id:"flags",children:[{value:"Ignore",id:"ignore",children:[],level:4},{value:"State",id:"state-1",children:[],level:4},{value:"Format",id:"format",children:[],level:4}],level:3}],level:2},{value:"Use Cases",id:"use-cases",children:[{value:"Tested Code Examples",id:"tested-code-examples",children:[],level:3},{value:"Checkpointed Tutorials",id:"checkpointed-tutorials",children:[],level:3}],level:2},{value:"Plugins",id:"plugins",children:[],level:2},{value:"Usage as a Module",id:"usage-as-a-module",children:[],level:2},{value:"Contributing",id:"contributing",children:[],level:2}],m={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"bluehawk"},"Bluehawk"),(0,l.kt)("p",null,"Bluehawk is a markup processor for extracting and manipulating arbitrary code.\nWith Bluehawk, you can:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Extract code examples for use in documentation"),(0,l.kt)("li",{parentName:"ul"},"Generate formatted code examples for use in documentation"),(0,l.kt)("li",{parentName:"ul"},'Replace "finished" code with "todo" code for a branch in a tutorial repo')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 See our ",(0,l.kt)("a",{parentName:"p",href:"https://mongodb-university.github.io/Bluehawk/"},"API Documentation")," or\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/mongodb-university/Bluehawk/issues/new"},"open an issue"))),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)("p",null,"Say you're documenting a library. To provide code examples for library functionality,\nyou're forced to copy & paste snippets of code from test cases you've written into\nyour documentation. Every time an API changes, or you want to improve an example, or\nyou want to fix a bug, you have to copy & paste those snippets again. Sooner or later\nyou'll miss a line, or forget to copy and paste a change from your tests to the\ndocumentation, or forget to update a line highlight... because you're trying to\nmaintain equivalent code snippets in two places at once."),(0,l.kt)("p",null,"What if there was a better way? What if you could write your examples in one place,\nand let a tool take care of removing your assertions and setup and copying the\nexamples into your documentation? Bluehawk does exactly that."),(0,l.kt)("h3",{id:"videos"},"Videos"),(0,l.kt)("p",null,"How do you use Bluehawk in workflows? Here are a couple of short video\noverviews of how the MongoDB Developer Education team uses Bluehawk to create\ncode examples:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://youtu.be/4G2n3Ps7qUY"},"Bluehawk: Extract & Generate Code Examples")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://youtu.be/DyF4tOxS0zU"},"Bluehawk: Generate Code for Tutorial Apps"))),(0,l.kt)("h2",{id:"install"},"Install"),(0,l.kt)("p",null,"Install the CLI globally:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"npm install -g bluehawk\n")),(0,l.kt)("h2",{id:"bluehawk-commands"},"Bluehawk Commands"),(0,l.kt)("p",null,"Bluehawk ",(0,l.kt)("strong",{parentName:"p"},"commands")," come in two forms: ",(0,l.kt)("em",{parentName:"p"},"single-line")," and ",(0,l.kt)("em",{parentName:"p"},"block"),". Single-line commands\noperate upon the current line, while block commands operate upon the span of lines between\nthe start of the command and the end of the command. Since commands aren't valid syntax in\nmost languages, you should place them in comments -- Bluehawk will still process them.\nTo avoid name clashes with various languages and markup frameworks, all Bluehawk commands\nbegin and end with colons (",(0,l.kt)("inlineCode",{parentName:"p"},":"),"). The following examples demonstrate the ",(0,l.kt)("a",{parentName:"p",href:"#remove"},"remove"),"\ncommand in single-line and block forms:"),(0,l.kt)("p",null,"Single-line commands use ",(0,l.kt)("inlineCode",{parentName:"p"},":<command>:")," to markup a single line:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public class Main {\n  public static void main(String[] args){\n    int a = 2;\n    int b = 3;\n    int c = a * b;\n    assert(c == 6); // :remove:\n    System.out.println("Hello world!");\n  }\n}\n')),(0,l.kt)("p",null,"Block commands use ",(0,l.kt)("inlineCode",{parentName:"p"},":<command>-start:")," and ",(0,l.kt)("inlineCode",{parentName:"p"},":<command>-end:")," to mark the beginning and end\nof a spanned range of lines:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public class Main {\n  public static void main(String[] args){\n    int a = 2;\n    int b = 3;\n    int c = a * b;\n    // :remove-start:\n    assert(c == 6);\n    // :remove-end:\n    System.out.println("Hello world!");\n  }\n}\n')),(0,l.kt)("p",null,"Some commands, like ",(0,l.kt)("inlineCode",{parentName:"p"},"remove")," in the examples above, don't require any arguments at all.\nOther commands, such as ",(0,l.kt)("inlineCode",{parentName:"p"},"snippet"),", require a unique (to that file) identifier. Yet other\ncommands, such as ",(0,l.kt)("inlineCode",{parentName:"p"},"replace"),", require an ",(0,l.kt)("a",{parentName:"p",href:"#attribute-lists"},"attribute list")," of JSON objects. Pass arguments to\ncommands by listing them after the command itself:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public class Main {\n  public static void main(String[] args){\n    // :snippet-start: multiply-abc\n    int a = 2;\n    int b = 3;\n    int c = a * b;\n    // :remove-start:\n    assert(c == 6);\n    // :remove-end:\n    System.out.println("Hello world!");\n    // :snippet-end:\n  }\n}\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 For a summary of all of the commands available in your local installation\nof Bluehawk, run ",(0,l.kt)("inlineCode",{parentName:"p"},"bluehawk list commands"),".")),(0,l.kt)("h3",{id:"attribute-lists"},"Attribute Lists"),(0,l.kt)("p",null,"Attribute lists are JSON objects that contain additional information about a command.\nThey must use double quotes for fields, and the opening line of an attribute list\nmust appear on the same line as the command itself."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'// :command: {\n//    "field": "value"\n// }\n// :replace-end:\n')),(0,l.kt)("h3",{id:"snippet"},"Snippet"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"snippet")," command, also aliased as ",(0,l.kt)("inlineCode",{parentName:"p"},"code-block"),", marks a range of content in a file\nas a snippet. You can use the ",(0,l.kt)("a",{parentName:"p",href:"#snip"},"snip")," CLI command to generate snippet files from\nthese snippets."),(0,l.kt)("p",null,"Because ",(0,l.kt)("inlineCode",{parentName:"p"},"snippet")," operates on ranges of content, it is only available as\na block command. You must pass ",(0,l.kt)("inlineCode",{parentName:"p"},"snippet")," an identifier."),(0,l.kt)("p",null,"Consider the following file:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Main.java"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public class Main {\n  public static void main(String[] args){\n    // :snippet-start: test-block\n    System.out.println("Hello world!");\n    // :snippet-end:\n  }\n}\n')),(0,l.kt)("p",null,"Running the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bluehawk snip Main.java -d .\n")),(0,l.kt)("p",null,"Produces the following output:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Main.codeblock.test-block.java"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'System.out.println("Hello world!");\n')),(0,l.kt)("h3",{id:"state"},"State"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"state")," command marks a range of content in a file as part of a particular state.\nYou can use the ",(0,l.kt)("a",{parentName:"p",href:"#snip"},"snip")," or ",(0,l.kt)("a",{parentName:"p",href:"#copy"},"copy")," CLI commands with the ",(0,l.kt)("a",{parentName:"p",href:"#state"},"state"),"\nflag to generate output files that contain only content from a specific named state.\nWhen you use the ",(0,l.kt)("inlineCode",{parentName:"p"},"--state")," flag to specify a state, all state blocks other than the\nspecified state are removed from the output. All content not in a state block is\nunaffected and outputs normally. ",(0,l.kt)("inlineCode",{parentName:"p"},"state"),' can be helpful for managing tutorial code\nwith multiple steps, such as a "start" state that only contains ',(0,l.kt)("inlineCode",{parentName:"p"},"// TODO"),' and a\n"final" state that contains completed implementation code.'),(0,l.kt)("p",null,"Because ",(0,l.kt)("inlineCode",{parentName:"p"},"state")," operates on ranges of content, it is only available as\na block command. You must pass ",(0,l.kt)("inlineCode",{parentName:"p"},"state")," at ",(0,l.kt)("em",{parentName:"p"},"least one")," identifier, which determines\nthe name of the state or states that the block belongs to. You can pass\nin a list of identifiers either through a space-separated list directly after\nthe command itself, or through the ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," field of an ",(0,l.kt)("a",{parentName:"p",href:"#attribute-lists"},"attribute list"),"."),(0,l.kt)("p",null,"Consider the following file:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Main.java"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public class Main {\n  public static void main(String[] args){\n    // :snippet-start: example\n    int example = 1;\n    // :state-start: hello-world\n    System.out.println("Hello world!");\n    // :state-end:\n    // :state-start: hello-user\n    System.out.println("Hello user!");\n    // :state-end:\n    example++;\n    // :snippet-end:\n  }\n}\n')),(0,l.kt)("p",null,"Running the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bluehawk snip Main.java -d . --state hello-user\n")),(0,l.kt)("p",null,"Produces the following output:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Main.codeblock.example.java"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'int example = 1;\nSystem.out.println("Hello user!");\nexample++;\n')),(0,l.kt)("p",null,"Alternatively, running the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bluehawk snip Main.java -d . --state hello-world\n")),(0,l.kt)("p",null,"Produces the following output:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Main.codeblock.example.java"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'int example = 1;\nSystem.out.println("Hello world!");\nexample++;\n')),(0,l.kt)("h3",{id:"state-uncomment"},"State-Uncomment"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"state-uncomment")," command combines the ",(0,l.kt)("a",{parentName:"p",href:"#state"},"state")," and ",(0,l.kt)("a",{parentName:"p",href:"#uncomment"},"uncomment"),"\ncommands. In terms of syntax, ",(0,l.kt)("inlineCode",{parentName:"p"},"state-uncomment")," works exactly the same as ",(0,l.kt)("inlineCode",{parentName:"p"},"state"),",\nexcept one layer of commenting is removed from the entire state in produced output.\nUse ",(0,l.kt)("inlineCode",{parentName:"p"},"state-uncomment")," to prevent executable code in a state from actually executing\nin the source code you use to produce output."),(0,l.kt)("p",null,"Because ",(0,l.kt)("inlineCode",{parentName:"p"},"state-uncomment")," operates on ranges of content, it is only available as\na block command."),(0,l.kt)("p",null,"Consider the following file:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Main.java"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public class Main {\n  public static void main(String[] args){\n    // :snippet-start: add-or-subtract\n    int example = 1;\n    // :state-start: add-one\n    example++;\n    // :state-end:\n    // :state-uncomment-start: subtract-one\n    //example--;\n    // :state--uncomment-end:\n    System.out.println("Example: " + example);\n    // :snippet-end:\n  }\n}\n')),(0,l.kt)("p",null,"Running the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bluehawk snip Main.java -d . --state subtract-one\n")),(0,l.kt)("p",null,"Produces the following output:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Main.codeblock.add-or-subtract.java"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'    int example = 1;\n    example--;\n    System.out.println("Example: " + example);\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 Note that Bluehawk has trimmed one layer of comments from the ",(0,l.kt)("inlineCode",{parentName:"p"},"hello-user"),"\nstate in the produced code block.")),(0,l.kt)("p",null,"With ",(0,l.kt)("inlineCode",{parentName:"p"},"state-uncomment"),", you can create multiple valid end states but only run\none of those states when executing your source code."),(0,l.kt)("h3",{id:"uncomment"},"Uncomment"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"uncomment")," command removes a single comment from the beginning of\neach line of the spanned range in all output."),(0,l.kt)("p",null,"Because ",(0,l.kt)("inlineCode",{parentName:"p"},"uncomment")," operates on ranges of content, it is only available as\na block command."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 Comments are only specified in certain language types. For example, plaintext\ndoes not have a comment syntax, so this command does nothing in plaintext.")),(0,l.kt)("p",null,"Consider the following file:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Main.java"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public class Main {\n  public static void main(String[] args){\n    int example = 1;\n    // :uncomment-start:\n    //example--;\n    // :uncomment-end:\n    example++;\n    System.out.println("Example: " + example);\n  }\n}\n')),(0,l.kt)("p",null,"Running the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bluehawk copy Main.java -d .\n")),(0,l.kt)("p",null,"Produces the following output:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Main.java"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public class Main {\n  public static void main(String[] args){\n    int example = 1;\n    example--;\n    example++;\n    System.out.println("Example: " + example);\n  }\n}\n')),(0,l.kt)("h3",{id:"replace"},"Replace"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"replace"),' command accepts a JSON dictionary called "terms" as input\nvia an attribute list, and replaces occurrences string keys in the map within\nthe spanned range with their map values in all output. You can use\n',(0,l.kt)("inlineCode",{parentName:"p"},"replace")," to hide implementation details like complicated class names\nor API endpoint URLs in generated output."),(0,l.kt)("p",null,"Because ",(0,l.kt)("inlineCode",{parentName:"p"},"replace"),' operates on ranges of content, it is only available\nas a block command. You must pass an attribute list containing "terms",\na dictionary of strings to strings.'),(0,l.kt)("p",null,"Consider the following file:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Main.java"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'// :replace-start: {\n//    "terms": {\n//       "MyMainExample": "Main",\n//       "www.example.com/rest/v1": "YOUR_REST_ENDPOINT_HERE"\n//    }\n// }\n\n/*\n * MyMainExample -- a class that contains only a hello world main method\n * that defines a rest endpoint.\n */\npublic class MyMainExample {\n  String rest_endpoint;\n\n  public static void main(String[] args){\n    System.out.println("Hello world!");\n    rest_endpoint = "www.example.com/rest/v1"\n  }\n}\n// :replace-end:\n')),(0,l.kt)("p",null,"Running the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bluehawk copy Main.java -d .\n")),(0,l.kt)("p",null,"Produces the following output:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Main.java"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'/*\n * Main -- a class that contains only a hello world main method\n * that defines a rest endpoint.\n */\npublic class Main {\n  String rest_endpoint;\n\n  public static void main(String[] args){\n    System.out.println("Hello world!");\n    rest_endpoint = "YOUR_REST_ENDPOINT_HERE"\n  }\n}\n')),(0,l.kt)("h3",{id:"emphasize"},"Emphasize"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"emphasize")," command highlights marked lines in formatted output.\n",(0,l.kt)("inlineCode",{parentName:"p"},"emphasize")," makes it easier to keep the correct lines highlighted\nwhen you update code samples, because it calculates the highlighted\nline numbers for you."),(0,l.kt)("p",null,"You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"emphasize")," as either a block command or a line command."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 The emphasize command only applies to ",(0,l.kt)("a",{parentName:"p",href:"#format"},"formatted output"),".\nUse the ",(0,l.kt)("inlineCode",{parentName:"p"},"--format")," flag with Bluehawk CLI to get formatted output.")),(0,l.kt)("p",null,"Consider the following file:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Main.java"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public class Main {\n  public static void main(String[] args){\n    // :code-block-start: modulo\n    int dividend = 11;\n    int divisor = 3;\n    int modulus = dividend % divisor; // :emphasize:\n    System.out.println(dividend + " % " + divisor + " = " + modulus);\n    // :code-block-end:\n  }\n}\n')),(0,l.kt)("p",null,"Running the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bluehawk snip Main.java -d . --format=rst\n")),(0,l.kt)("p",null,"Produces the following output:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Main.codeblock.modulo.java.code-block.rst"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rst"},'.. code-block:: java\n   :emphasize-lines: 3\n\n   int dividend = 11;\n   int divisor = 3;\n   int modulus = dividend % divisor;\n   System.out.println(dividend + " % " + divisor + " = " + modulus);\n')),(0,l.kt)("h3",{id:"remove"},"Remove"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"remove")," command, also aliased as ",(0,l.kt)("inlineCode",{parentName:"p"},"hide"),", removes the spanned\nrange from Bluehawk output. ",(0,l.kt)("inlineCode",{parentName:"p"},"remove")," can be helpful for hiding\nassertions and state setup from user-facing code samples."),(0,l.kt)("p",null,"You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"remove")," as either a block command or a\nline command."),(0,l.kt)("p",null,"Consider the following file:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Main.java"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public class Main {\n\n  public static void main(String[] args){\n    // :code-block-start: division\n    int dividend = 11;\n    int divisor = 3;\n    int quotient = dividend / divisor;\n    assert(quotient == 3) // :remove:\n    System.out.println(dividend + " / " + divisor + " = " + quotient);\n    // :code-block-end:\n  }\n}\n')),(0,l.kt)("p",null,"Running the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bluehawk snip Main.java -d .\n")),(0,l.kt)("p",null,"Produces the following output:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Main.codeblock.division.java"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rst"},'int dividend = 11;\nint divisor = 3;\nint quotient = dividend / divisor;\nSystem.out.println(dividend + " / " + divisor + " = " + quotient);\n')),(0,l.kt)("h2",{id:"cli"},"CLI"),(0,l.kt)("h3",{id:"commands"},"Commands"),(0,l.kt)("p",null,"Use commands to generate different kinds of output with Bluehawk, including\ncode blocks, full files of code, and even error checks."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 Commands for the Bluehawk CLI are not the same as\n",(0,l.kt)("a",{parentName:"p",href:"#bluehawk-commands"},"Bluehawk Commands"),", the syntax\ninterpreted by Bluehawk to process input files.")),(0,l.kt)("h4",{id:"snip"},"Snip"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bluehawk snip --destination <output-directory> <input-directory-or-file>\n")),(0,l.kt)("p",null,'Output "snippet files" that contain only the content of ',(0,l.kt)("inlineCode",{parentName:"p"},"code-block")," or\n",(0,l.kt)("inlineCode",{parentName:"p"},"snippet")," Bluehawk commands, named in the format\n",(0,l.kt)("inlineCode",{parentName:"p"},"<source-file-name>.codeblock.<codeblock-name>.<source-file-extension>"),".\nBy default, this command generates snippets\nthat omit all ",(0,l.kt)("inlineCode",{parentName:"p"},"state")," command contents. However,\nyou can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"--state")," flag to generate snippet files that include\ncontent from a single state that you specify."),(0,l.kt)("h4",{id:"copy"},"Copy"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bluehawk copy --destination <output-directory> <input-directory-or-file>\n")),(0,l.kt)("p",null,"Output full bluehawk-processed input files, in their original directory\nstructure, to destination directory. Binary files are copied without\nBluehawk processing. You can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"--ignore")," flag to add gitignore-style\nignore patterns that omit matched files from output.\nBy default, this command generates output files that omit all ",(0,l.kt)("inlineCode",{parentName:"p"},"state"),".\nHowever, you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"--state")," flag to generate output files that\ninclude content from a single state that you specify."),(0,l.kt)("h4",{id:"check"},"Check"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"bluehawk check <input-directory-or-file>\n")),(0,l.kt)("p",null,"Generates non-zero output if processing any input files generates a Bluehawk\nerror, zero output otherwise. Does not generate any files: instead, ",(0,l.kt)("inlineCode",{parentName:"p"},"check"),"\noutputs directly to command line."),(0,l.kt)("h3",{id:"flags"},"Flags"),(0,l.kt)("p",null,"You can use flags to tweak the output of Bluehawk."),(0,l.kt)("h4",{id:"ignore"},"Ignore"),(0,l.kt)("p",null,"Pass a pattern to the ",(0,l.kt)("inlineCode",{parentName:"p"},"--ignore")," flag to omit any file that matches that\npattern from Bluehawk's input files. Bluehawk will not process or generate\noutput for any ignored file. You can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"ignore")," flag multiple times\nin a single Bluehawk execution to ignore multiple patterns. ",(0,l.kt)("inlineCode",{parentName:"p"},".gitignore")," files\nin the input directory tree are automatically used as ignore patterns."),(0,l.kt)("h4",{id:"state-1"},"State"),(0,l.kt)("p",null,"Pass a state's id to the ",(0,l.kt)("inlineCode",{parentName:"p"},"--state")," flag to include only the contents of that\nstate, and no other states, in the generated output."),(0,l.kt)("h4",{id:"format"},"Format"),(0,l.kt)("p",null,"Pass the name of a markup syntax to the ",(0,l.kt)("inlineCode",{parentName:"p"},"--format")," flag when generating snippets\nto generate a formatted version of that snippet in the specified markup syntax.\nThis command currently only supports\n",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ReStructuredText"},"reStructuredText")," syntax using\nthe identifier ",(0,l.kt)("inlineCode",{parentName:"p"},"rst"),"."),(0,l.kt)("h2",{id:"use-cases"},"Use Cases"),(0,l.kt)("h3",{id:"tested-code-examples"},"Tested Code Examples"),(0,l.kt)("p",null,"Imagine you want to paste some code from a unit test into your docs. You can\nmark up the unit test source file like this with Bluehawk commands like\n",(0,l.kt)("inlineCode",{parentName:"p"},":snippet-start:"),", ",(0,l.kt)("inlineCode",{parentName:"p"},":snippet-end:"),", ",(0,l.kt)("inlineCode",{parentName:"p"},":remove-start:"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},":remove-end:"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},'// SomeTest.swift\n\n// ... more tests ...\nfunc someTest() {\n    // :snippet-start: some-example\n    let person = getPerson()\n    // :remove-start: // hide test boilerplate from the code block\n    XCTAssert(person.name != "Keith")\n    // :remove-end:\n    person.doSomething {\n        person.doSomethingElse()\n    }\n    // :snippet-end:\n}\n// ... more tests ...\n')),(0,l.kt)("p",null,"Running Bluehawk with the ",(0,l.kt)("inlineCode",{parentName:"p"},"snip")," command on this file will produce a snippet\nfile called ",(0,l.kt)("inlineCode",{parentName:"p"},"SomeTest.codeblock.some-example.swift")," that looks something like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"let person = getPerson()\nperson.doSomething {\n    person.doSomethingElse()\n}\n")),(0,l.kt)("p",null,"You can now import this snippet into your documentation. Now you have the\nbenefit of tested examples that are still easy to read in the docs."),(0,l.kt)("p",null,"Bluehawk markup can go into any source file, so you don't need to rig every unit\ntest framework you use up to also extract code examples. Just use Bluehawk with\nthe unit test framework that suits your language and your project. Heck, you don't\neven need a unit test framework. Use Bluehawk in your app or bash script that you\nrun to make sure everything's still more or less working."),(0,l.kt)("h3",{id:"checkpointed-tutorials"},"Checkpointed Tutorials"),(0,l.kt)("p",null,'Suppose you have a tutorial repo that learners can clone to follow along with\nyour tutorial from a certain starting point, say a "start" branch. You also want\nlearners to be able to check out a "final" branch so they can see the finished\nproject. As the tutorial developer, you would have to maintain these two state\nbranches, which can be tedious and error prone.'),(0,l.kt)("p",null,"To manage this process, you can use Bluehawk to mark up your tutorial source and\nindicate different states or checkpoints with the ",(0,l.kt)("inlineCode",{parentName:"p"},":state-start:")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},":state-end:")," commands:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"// WelcomeViewController.swift\n\n// ... more code ...\n// :snippet-start: sign-up\n@objc func signUp() {\n    // :state-start: final\n    setLoading(true);\n    app.emailPasswordAuth.registerUser(email: email!, password: password!, completion: { [weak self](error) in\n        DispatchQueue.main.async {\n            self!.setLoading(false);\n            ...\n        }\n    })\n    // :state-end:\n    // :state-start: start\n    // TODO: Use the app's emailPasswordAuth to registerUser with the email and password.\n    // When registered, call signIn().\n    // :state-uncomment-end:\n}\n// :snippet-end:\n// ... more code ...\n")),(0,l.kt)("p",null,"Running ",(0,l.kt)("inlineCode",{parentName:"p"},"bluehawk copy")," on this file with ",(0,l.kt)("inlineCode",{parentName:"p"},"--state start")," results in a copy of\n",(0,l.kt)("inlineCode",{parentName:"p"},"WelcomeViewController.swift")," that looks something like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"// WelcomeViewController.swift\n\n// ... more code ...\n@objc func signUp() {\n    // TODO: Use the app's emailPasswordAuth to registerUser with the email and password.\n    // When registered, call signIn().\n}\n// ... more code ...\n")),(0,l.kt)("p",null,'Notice that you still have all of the boilerplate, but no final implementation\ncode. Only the "TODO" is left.'),(0,l.kt)("p",null,"Using the ",(0,l.kt)("inlineCode",{parentName:"p"},"--state final")," flag produces another version of\n",(0,l.kt)("inlineCode",{parentName:"p"},"WelcomeViewController.swift"),' that has the boilerplate and the final\nimplementation code, but no "TODO":'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-swift"},"// WelcomeViewController.swift\n\n// ... more code ...\n@objc func signUp() {\n    setLoading(true);\n    app.emailPasswordAuth.registerUser(email: email!, password: password!, completion: { [weak self](error) in\n        DispatchQueue.main.async {\n            self!.setLoading(false);\n            ...\n        }\n    })\n}\n// ... more code ...\n")),(0,l.kt)("p",null,"You can run Bluehawk on an entire directory, and each file in the repo will be\ncopied or transformed to the destination. This makes it easy to copy one state\nof the entire tutorial source into another repo that learners can clone."),(0,l.kt)("h2",{id:"plugins"},"Plugins"),(0,l.kt)("p",null,"You can add commands and listeners by creating a JS file or node project that\nimplements the register() function:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// myPlugin.js\nexports.register = (bluehawk) => {\n  // Register a new command, :my-command:\n  bluehawk.registerCommand("my-command", {\n    rules: [],\n    process: (request) => {\n      // Execute command\n    },\n  });\n\n  // Register a document listener\n  bluehawk.subscribe((finishedDocument) => {\n    // Do something with finishedDocument\n  });\n};\n')),(0,l.kt)("p",null,"Usage:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"bluehawk --plugin ./myPlugin source.txt\n")),(0,l.kt)("p",null,"You can pass the --plugin flag multiple times to load different plugins or create a plugin that is composed of other plugins."),(0,l.kt)("h2",{id:"usage-as-a-module"},"Usage as a Module"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"npm install bluehawk\n")),(0,l.kt)("h2",{id:"contributing"},"Contributing"),(0,l.kt)("p",null,"For more information about how to run, build, or test Bluehawk yourself, see ",(0,l.kt)("a",{parentName:"p",href:"CONTRIBUTING.md"},"CONTRIBUTING.md"),"."))}d.isMDXComponent=!0}}]);