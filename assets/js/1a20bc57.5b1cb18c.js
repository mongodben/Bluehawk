"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[468],{7905:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return c}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),l=["components"],r={id:"cli",title:"CLI",sidebar_label:"CLI",sidebar_position:2,custom_edit_url:null},s=void 0,u={unversionedId:"cli",id:"cli",isDocsHomePage:!1,title:"CLI",description:"Commands",source:"@site/docs/cli.md",sourceDirName:".",slug:"/cli",permalink:"/Bluehawk/cli",editUrl:null,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"cli",title:"CLI",sidebar_label:"CLI",sidebar_position:2,custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"Commands",permalink:"/Bluehawk/commands"},next:{title:"Use Cases",permalink:"/Bluehawk/use-cases"}},p=[{value:"Commands",id:"commands",children:[{value:"Snip",id:"snip",children:[],level:3},{value:"Copy",id:"copy",children:[],level:3},{value:"Check",id:"check",children:[],level:3}],level:2},{value:"Flags",id:"flags",children:[{value:"Ignore",id:"ignore",children:[],level:3},{value:"State",id:"state",children:[],level:3},{value:"Format",id:"format",children:[],level:3}],level:2}],d={toc:p};function c(e){var t=e.components,n=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"commands"},"Commands"),(0,o.kt)("p",null,"Use commands to generate different kinds of output with Bluehawk, including\ncode blocks, full files of code, and even error checks."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 Commands for the Bluehawk CLI are not the same as\n",(0,o.kt)("a",{parentName:"p",href:"./commands"},"Bluehawk Commands"),", the syntax\ninterpreted by Bluehawk to process input files.")),(0,o.kt)("h3",{id:"snip"},"Snip"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"bluehawk snip --destination <output-directory> <input-directory-or-file>\n")),(0,o.kt)("p",null,'Output "snippet files" that contain only the content of ',(0,o.kt)("inlineCode",{parentName:"p"},"code-block")," or\n",(0,o.kt)("inlineCode",{parentName:"p"},"snippet")," Bluehawk commands, named in the format\n",(0,o.kt)("inlineCode",{parentName:"p"},"<source-file-name>.codeblock.<codeblock-name>.<source-file-extension>"),".\nBy default, this command generates snippets\nthat omit all ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," command contents. However,\nyou can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"--state")," flag to generate snippet files that include\ncontent from a single state that you specify."),(0,o.kt)("h3",{id:"copy"},"Copy"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"bluehawk copy --destination <output-directory> <input-directory-or-file>\n")),(0,o.kt)("p",null,"Output full bluehawk-processed input files, in their original directory\nstructure, to destination directory. Binary files are copied without\nBluehawk processing. You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"--ignore")," flag to add gitignore-style\nignore patterns that omit matched files from output.\nBy default, this command generates output files that omit all ",(0,o.kt)("inlineCode",{parentName:"p"},"state"),".\nHowever, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"--state")," flag to generate output files that\ninclude content from a single state that you specify."),(0,o.kt)("h3",{id:"check"},"Check"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"bluehawk check <input-directory-or-file>\n")),(0,o.kt)("p",null,"Generates non-zero output if processing any input files generates a Bluehawk\nerror, zero output otherwise. Does not generate any files: instead, ",(0,o.kt)("inlineCode",{parentName:"p"},"check"),"\noutputs directly to command line."),(0,o.kt)("h2",{id:"flags"},"Flags"),(0,o.kt)("p",null,"You can use flags to tweak the output of Bluehawk."),(0,o.kt)("h3",{id:"ignore"},"Ignore"),(0,o.kt)("p",null,"Pass a pattern to the ",(0,o.kt)("inlineCode",{parentName:"p"},"--ignore")," flag to omit any file that matches that\npattern from Bluehawk's input files. Bluehawk will not process or generate\noutput for any ignored file. You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ignore")," flag multiple times\nin a single Bluehawk execution to ignore multiple patterns. ",(0,o.kt)("inlineCode",{parentName:"p"},".gitignore")," files\nin the input directory tree are automatically used as ignore patterns."),(0,o.kt)("h3",{id:"state"},"State"),(0,o.kt)("p",null,"Pass a state's id to the ",(0,o.kt)("inlineCode",{parentName:"p"},"--state")," flag to include only the contents of that\nstate, and no other states, in the generated output."),(0,o.kt)("h3",{id:"format"},"Format"),(0,o.kt)("p",null,"Pass the name of a markup syntax to the ",(0,o.kt)("inlineCode",{parentName:"p"},"--format")," flag when generating snippets\nto generate a formatted version of that snippet in the specified markup syntax.\nThis command currently only supports\n",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ReStructuredText"},"reStructuredText")," syntax using\nthe identifier ",(0,o.kt)("inlineCode",{parentName:"p"},"rst"),"."))}c.isMDXComponent=!0}}]);