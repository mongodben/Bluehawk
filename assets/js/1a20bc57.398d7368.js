"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[468],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7905:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"cli",title:"CLI",sidebar_label:"CLI",sidebar_position:2,custom_edit_url:null},u=void 0,s={unversionedId:"cli",id:"cli",isDocsHomePage:!1,title:"CLI",description:"Commands",source:"@site/docs/cli.md",sourceDirName:".",slug:"/cli",permalink:"/Bluehawk/cli",editUrl:null,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"cli",title:"CLI",sidebar_label:"CLI",sidebar_position:2,custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"Commands",permalink:"/Bluehawk/commands"},next:{title:"Use Cases",permalink:"/Bluehawk/use-cases"}},c=[{value:"Commands",id:"commands",children:[{value:"Snip",id:"snip",children:[],level:3},{value:"Copy",id:"copy",children:[],level:3},{value:"Check",id:"check",children:[],level:3}],level:2},{value:"Flags",id:"flags",children:[{value:"Ignore",id:"ignore",children:[],level:3},{value:"State",id:"state",children:[],level:3},{value:"Format",id:"format",children:[],level:3}],level:2}],p={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"commands"},"Commands"),(0,o.kt)("p",null,"Use commands to generate different kinds of output with Bluehawk, including\ncode blocks, full files of code, and even error checks."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 Commands for the Bluehawk CLI are not the same as\n",(0,o.kt)("a",{parentName:"p",href:"./commands"},"Bluehawk Commands"),", the syntax\ninterpreted by Bluehawk to process input files.")),(0,o.kt)("h3",{id:"snip"},"Snip"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"bluehawk snip --destination <output-directory> <input-directory-or-file>\n")),(0,o.kt)("p",null,'Output "snippet files" that contain only the content of ',(0,o.kt)("inlineCode",{parentName:"p"},"code-block")," or\n",(0,o.kt)("inlineCode",{parentName:"p"},"snippet")," Bluehawk commands, named in the format\n",(0,o.kt)("inlineCode",{parentName:"p"},"<source-file-name>.codeblock.<codeblock-name>.<source-file-extension>"),".\nBy default, this command generates snippets\nthat omit all ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," command contents. However,\nyou can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"--state")," flag to generate snippet files that include\ncontent from a single state that you specify."),(0,o.kt)("h3",{id:"copy"},"Copy"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"bluehawk copy --destination <output-directory> <input-directory-or-file>\n")),(0,o.kt)("p",null,"Output full bluehawk-processed input files, in their original directory\nstructure, to destination directory. Binary files are copied without\nBluehawk processing. You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"--ignore")," flag to add gitignore-style\nignore patterns that omit matched files from output.\nBy default, this command generates output files that omit all ",(0,o.kt)("inlineCode",{parentName:"p"},"state"),".\nHowever, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"--state")," flag to generate output files that\ninclude content from a single state that you specify."),(0,o.kt)("h3",{id:"check"},"Check"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"bluehawk check <input-directory-or-file>\n")),(0,o.kt)("p",null,"Generates non-zero output if processing any input files generates a Bluehawk\nerror, zero output otherwise. Does not generate any files: instead, ",(0,o.kt)("inlineCode",{parentName:"p"},"check"),"\noutputs directly to command line."),(0,o.kt)("h2",{id:"flags"},"Flags"),(0,o.kt)("p",null,"You can use flags to tweak the output of Bluehawk."),(0,o.kt)("h3",{id:"ignore"},"Ignore"),(0,o.kt)("p",null,"Pass a pattern to the ",(0,o.kt)("inlineCode",{parentName:"p"},"--ignore")," flag to omit any file that matches that\npattern from Bluehawk's input files. Bluehawk will not process or generate\noutput for any ignored file. You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ignore")," flag multiple times\nin a single Bluehawk execution to ignore multiple patterns. ",(0,o.kt)("inlineCode",{parentName:"p"},".gitignore")," files\nin the input directory tree are automatically used as ignore patterns."),(0,o.kt)("h3",{id:"state"},"State"),(0,o.kt)("p",null,"Pass a state's id to the ",(0,o.kt)("inlineCode",{parentName:"p"},"--state")," flag to include only the contents of that\nstate, and no other states, in the generated output."),(0,o.kt)("h3",{id:"format"},"Format"),(0,o.kt)("p",null,"Pass the name of a markup syntax to the ",(0,o.kt)("inlineCode",{parentName:"p"},"--format")," flag when generating snippets\nto generate a formatted version of that snippet in the specified markup syntax.\nThis command currently only supports\n",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ReStructuredText"},"reStructuredText")," syntax using\nthe identifier ",(0,o.kt)("inlineCode",{parentName:"p"},"rst"),"."))}d.isMDXComponent=!0}}]);