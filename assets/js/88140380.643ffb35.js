"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5899],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=s,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||r;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1584:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return u}});var a=n(7462),s=n(3366),r=(n(7294),n(3905)),o=["components"],i={id:"code-snippets",title:"Extract Code Snippets",slug:"/code-snippets/",sidebar_label:"Extract Code Snippets",sidebar_position:1,custom_edit_url:null},l=void 0,p={unversionedId:"guides/code-snippets",id:"guides/code-snippets",title:"Extract Code Snippets",description:"Do you prefer learning through videos? Check out our video on",source:"@site/docs/guides/code-snippets.md",sourceDirName:"guides",slug:"/code-snippets/",permalink:"/Bluehawk/code-snippets/",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"code-snippets",title:"Extract Code Snippets",slug:"/code-snippets/",sidebar_label:"Extract Code Snippets",sidebar_position:1,custom_edit_url:null},sidebar:"mainSidebar",previous:{title:"Use Cases",permalink:"/Bluehawk/use-cases"},next:{title:"Checkpointed Tutorials",permalink:"/Bluehawk/tutorials/"}},d={},u=[{value:"Annotate Unit Tests",id:"annotate-unit-tests",level:2},{value:"Output File Names",id:"output-file-names",level:3},{value:"Example Unit Test Annotation",id:"example-unit-test-annotation",level:3},{value:"Snippet start and end",id:"snippet-start-and-end",level:4},{value:"Remove code",id:"remove-code",level:4},{value:"Replace",id:"replace",level:4},{value:"Use the CLI to Extract Snippets",id:"use-the-cli-to-extract-snippets",level:2},{value:"Extract Code from a Single File",id:"extract-code-from-a-single-file",level:3},{value:"Extract Code in a Directory",id:"extract-code-in-a-directory",level:3},{value:"Include the Snippets In Your Documentation",id:"include-the-snippets-in-your-documentation",level:2}],c={toc:u};function m(e){var t=e.components,n=(0,s.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Do you prefer learning through videos? Check out our video on\n",(0,r.kt)("a",{parentName:"p",href:"/#extract-and-generate-code-examples"},"Extract and Generate Code Examples")))),(0,r.kt)("h2",{id:"annotate-unit-tests"},"Annotate Unit Tests"),(0,r.kt)("p",null,"The first step to use Bluehawk is to annotate your unit tests with\n",(0,r.kt)("a",{parentName:"p",href:"/reference/tags"},"Bluehawk tags"),". Tags are similar to HTML or XML; you\nput a ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," tag before the code you want to annotate, and an ",(0,r.kt)("inlineCode",{parentName:"p"},"end")," tag\nafter it. Bluehawk reads those start and end tags, and generates output\nfiles based on your annotations. You can use Bluehawk tags in any text file."),(0,r.kt)("p",null,'The Bluehawk tool has language-specific "comment awareness" - as well as\nstring literal awareness - that allows it to:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Avoid making snippet files with a closing block comment token at the front"),(0,r.kt)("li",{parentName:"ul"},'Parse multi-line, commented out JSON "attribute lists" of tags so they\ndon\'t create syntax errors in your code')),(0,r.kt)("p",null,"There is not currently a way to find out which languages Bluehawk supports\nfrom the CLI. However, you can see the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mongodb-university/Bluehawk/blob/8bb5766e5f30182ed3992eae8f36dba8a8db99ba/src/bluehawk/getBluehawk.ts#L52"},"supported file extensions in\nthe Bluehawk source"),"\nto see if Bluehawk supports your preferred language."),(0,r.kt)("p",null,"To request support for your language, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mongodb-university/Bluehawk/issues"},"file an issue in the Bluehawk\nrepository"),", or\nmake a PR to add support for your preferred language."),(0,r.kt)("h3",{id:"output-file-names"},"Output File Names"),(0,r.kt)("p",null,"When you start a Bluehawk code block tag, you append a descriptive title,\nsimilar to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// :snippet-start: person-model\n")),(0,r.kt)("p",null,"When you generate Bluehawk output, the output file name concatenates:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The name of your unit test file"),(0,r.kt)("li",{parentName:"ul"},"The word ",(0,r.kt)("inlineCode",{parentName:"li"},"snippet")),(0,r.kt)("li",{parentName:"ul"},"The descriptive name that you put in the ",(0,r.kt)("inlineCode",{parentName:"li"},"snippet-start")," tag"),(0,r.kt)("li",{parentName:"ul"},"The file type of your unit test file")),(0,r.kt)("p",null,"For this example, the code block is in a file called Models.swift, so\nthe generated output file name would be: ",(0,r.kt)("inlineCode",{parentName:"p"},"Models.snippet.person-model.swift"),"."),(0,r.kt)("h3",{id:"example-unit-test-annotation"},"Example Unit Test Annotation"),(0,r.kt)("h4",{id:"snippet-start-and-end"},"Snippet start and end"),(0,r.kt)("p",null,"This is a complete code example in the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mongodb/docs-realm/blob/master/examples/ios/Examples/Models.swift"},"Models.swift"),"\nfile in the Realm Docs iOS Unit Test suite."),(0,r.kt)("p",null,"For this code snippet, we don't need to show the ",(0,r.kt)("inlineCode",{parentName:"p"},"import")," statement in our final\nexample, so we start the snippet after it. Then, after the code we want\nto show in our final example, we end the snippet."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'import RealmSwift\n\n// :snippet-start: person-model\nclass Person: Object {\n    // Required string property\n    @Persisted var name: String = ""\n\n    // Optional string property\n    @Persisted var address: String?\n\n    // Optional integral type property\n    @Persisted var age: Int?\n}\n// :snippet-end:\n')),(0,r.kt)("p",null,"The output file becomes\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mongodb/docs-realm/blob/master/source/examples/generated/code/start/Models.snippet.person-model.swift"},"Models.snippet.person-model.swift"),". After we use the Bluehawk CLI to extract\nthis code example, the final code example looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'class Person: Object {\n    // Required string property\n    @Persisted var name: String = ""\n\n    // Optional string property\n    @Persisted var address: String?\n\n    // Optional integral type property\n    @Persisted var age: Int?\n}\n')),(0,r.kt)("p",null,"The output file includes only the lines of code between the ",(0,r.kt)("inlineCode",{parentName:"p"},"snippet-start"),"\nand the ",(0,r.kt)("inlineCode",{parentName:"p"},"snippet-end")," tags."),(0,r.kt)("h4",{id:"remove-code"},"Remove code"),(0,r.kt)("p",null,"Bluehawk lets you to remove code that isn't relevant to your\ndocumentation viewers."),(0,r.kt)("p",null,"This example is from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mongodb/docs-realm/blob/master/examples/ios/Examples/ManageEmailPasswordUsers.swift"},"ManageEmailPasswordUsers.swift")," file in the Realm Docs iOS Unit Test suite."),(0,r.kt)("p",null,"This uses the snippet start and end tags, but it also uses ",(0,r.kt)("inlineCode",{parentName:"p"},"// :remove-start:"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"// :remove-end:")," to remove elements of the code example. Here, we're\nremoving a test assertion in the ",(0,r.kt)("inlineCode",{parentName:"p"},"catch")," block that the documentation viewer\ndoesn't need to see. You might also use it to remove test setup or teardown code\nthat isn't relevant to your documentation viewers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'    func testPasswordResetFunc() async {\n        // :snippet-start: password-reset-function\n        let app = App(id: YOUR_REALM_APP_ID)\n        let client = app.emailPasswordAuth\n\n        let email = "forgot.my.password@example.com"\n        let newPassword = "mynewpassword12345"\n        // The password reset function takes any number of\n        // arguments. You might ask the user to provide answers to\n        // security questions, for example, to verify the user\n        // should be able to complete the password reset.\n        let args: [AnyBSON] = []\n\n        // This SDK call maps to the custom password reset\n        // function that you define in the backend\n        do {\n            try await client.callResetPasswordFunction(email: email, password: newPassword, args: args)\n            print("Password reset successful!")\n        } catch {\n            print("Password reset failed: \\(error.localizedDescription)")\n            // :remove-start:\n            XCTAssertEqual(error.localizedDescription, "user not found")\n            // :remove-end:\n        }\n        // :snippet-end:\n    }\n')),(0,r.kt)("p",null,"The final output code example at\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mongodb/docs-realm/blob/master/source/examples/generated/code/start/ManageEmailPasswordUsers.snippet.password-reset-function.swift"},"ManageEmailPasswordUsers.snippet.password-reset-function.swift"),"\nlooks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'let app = App(id: YOUR_REALM_APP_ID)\nlet client = app.emailPasswordAuth\n\nlet email = "forgot.my.password@example.com"\nlet newPassword = "mynewpassword12345"\n// The password reset function takes any number of\n// arguments. You might ask the user to provide answers to\n// security questions, for example, to verify the user\n// should be able to complete the password reset.\nlet args: [AnyBSON] = []\n\n// This SDK call maps to the custom password reset\n// function that you define in the backend\ndo {\n    try await client.callResetPasswordFunction(email: email, password: newPassword, args: args)\n    print("Password reset successful!")\n} catch {\n    print("Password reset failed: \\(error.localizedDescription)")\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"catch")," block does not show the hidden assertion; it only shows the\nprint line."),(0,r.kt)("h4",{id:"replace"},"Replace"),(0,r.kt)("p",null,"Bluehawk gives you the ability to replace terms with different terms, or even\nnothing at all. In the Realm Docs iOS Unit Test suite, we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"replace")," tag\nto remove awkward names we have to use to avoid namespace collisions. For\nexample, here are the opening lines of the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mongodb/docs-realm/blob/master/examples/ios/Examples/ReadWriteData.swift"},"ReadWriteData.swift"),"\nfile:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'// :replace-start: {\n//   "terms": {\n//     "ReadWriteDataExamples_": ""\n//   }\n// }\nimport XCTest\nimport RealmSwift\n\n// :snippet-start: models\nclass ReadWriteDataExamples_DogToy: Object {\n    @Persisted var name = ""\n}\n\nclass ReadWriteDataExamples_Dog: Object {\n    @Persisted var name = ""\n    @Persisted var age = 0\n    @Persisted var color = ""\n    @Persisted var currentCity = ""\n\n    // To-one relationship\n    @Persisted var favoriteToy: ReadWriteDataExamples_DogToy?\n}\n\nclass ReadWriteDataExamples_Person: Object {\n    @Persisted(primaryKey: true) var id = 0\n    @Persisted var name = ""\n\n    // To-many relationship - a person can have many dogs\n    @Persisted var dogs: List<ReadWriteDataExamples_Dog>\n\n    // Inverse relationship - a person can be a member of many clubs\n    @Persisted(originProperty: "members") var clubs: LinkingObjects<ReadWriteDataExamples_DogClub>\n}\n\nclass ReadWriteDataExamples_DogClub: Object {\n    @Persisted var name = ""\n    @Persisted var members: List<ReadWriteDataExamples_Person>\n}\n// :snippet-end:\n// Many more lines of code examples, until eventually, we end the replace\n// :replace-end:\n')),(0,r.kt)("p",null,"As you can see, the model names such as ",(0,r.kt)("inlineCode",{parentName:"p"},"ReadWriteDataExamples_DogToy")," are\nvery awkward. The ",(0,r.kt)("inlineCode",{parentName:"p"},"ReadWriteDataExamples")," is present to avoid namespace\ncollisions with ",(0,r.kt)("inlineCode",{parentName:"p"},"Dog")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," models in other test files. But this\nawkward name isn't something we want to show documentation viewers."),(0,r.kt)("p",null,"Fortunately, replace lets us swap any instance of the term we specify with\nsome alternative. In this example, we replace ",(0,r.kt)("inlineCode",{parentName:"p"},"ReadWriteDataExamples"),"\nwith an empty string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'// :replace-start: {\n//   "terms": {\n//     "ReadWriteDataExamples_": ""\n//   }\n// }\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mongodb/docs-realm/blob/master/source/examples/generated/code/start/ReadWriteData.snippet.models.swift"},"output file for the code block above"),"\nlooks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'class DogToy: Object {\n    @Persisted var name = ""\n}\n\nclass Dog: Object {\n    @Persisted var name = ""\n    @Persisted var age = 0\n    @Persisted var color = ""\n    @Persisted var currentCity = ""\n\n    // To-one relationship\n    @Persisted var favoriteToy: DogToy?\n}\n\nclass Person: Object {\n    @Persisted(primaryKey: true) var id = 0\n    @Persisted var name = ""\n\n    // To-many relationship - a person can have many dogs\n    @Persisted var dogs: List<Dog>\n\n    // Inverse relationship - a person can be a member of many clubs\n    @Persisted(originProperty: "members") var clubs: LinkingObjects<DogClub>\n}\n\nclass DogClub: Object {\n    @Persisted var name = ""\n    @Persisted var members: List<Person>\n}\n')),(0,r.kt)("p",null,"The long, awkward name has been replaced with nothing."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Be careful with ",(0,r.kt)("inlineCode",{parentName:"p"},"replace"),". Use VerySpecificNamesAndCharacters","_"," here so\nyou can be sure you don't unintentionally delete something common."))),(0,r.kt)("h2",{id:"use-the-cli-to-extract-snippets"},"Use the CLI to Extract Snippets"),(0,r.kt)("p",null,"After you annotate your code examples with Bluehawk tags, use the\nBluehawk CLI to parse the content. The CLI generates output files that contain\nonly the content you specify. The Bluehawk CLI accepts various\n",(0,r.kt)("a",{parentName:"p",href:"/reference/cli"},"commands")," to generate output in the way you want it."),(0,r.kt)("p",null,"The most common command you'll use is ",(0,r.kt)("inlineCode",{parentName:"p"},"bluehawk snip"),". When you snip code\nblocks, you pass the output directory and the input file or directory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"bluehawk snip -o <output-directory> <input-directory-or-file>\n")),(0,r.kt)("h3",{id:"extract-code-from-a-single-file"},"Extract Code from a Single File"),(0,r.kt)("p",null,"If you're just updating a single code example or tutorial, you can extract\ncode from a single file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"bluehawk snip -o source/examples/generated/code/start/ examples/ios/Examples/ReadWriteData.swift\n")),(0,r.kt)("p",null,"This example extracts code snippets from the ",(0,r.kt)("inlineCode",{parentName:"p"},"ReadWriteData.swift")," file, and\ngenerates output files in ",(0,r.kt)("inlineCode",{parentName:"p"},"source/examples/generated/code/start/"),"."),(0,r.kt)("h3",{id:"extract-code-in-a-directory"},"Extract Code in a Directory"),(0,r.kt)("p",null,"If you want to generate Bluehawk output for all the files in a directory,\nyou can pass a directory as an input source:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"bluehawk snip -o source/examples/generated/code/start/ examples/ios/Examples\n")),(0,r.kt)("p",null,"In this example, ",(0,r.kt)("inlineCode",{parentName:"p"},"examples/ios/examples")," is the directory that contains all\nof the Realm docs iOS unit test files. If we create new test files, or\nchange existing tests, and then run this command, Bluehawk generates\nnew or updated output files for all changes."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Make an ",(0,r.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/alias-command-in-linux-with-examples/"},"alias"),"\nfor common Bluehawk commands. If you find yourself always running the same\n",(0,r.kt)("inlineCode",{parentName:"p"},"bluehawk snip")," command with the same input and output directories, make\nit a command-line alias. I have ",(0,r.kt)("inlineCode",{parentName:"p"},"bluehawkify")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"bluehawkify-android")," as\naliases for common Bluehawk CLI commands."))),(0,r.kt)("h2",{id:"include-the-snippets-in-your-documentation"},"Include the Snippets In Your Documentation"),(0,r.kt)("p",null,"After annotating code examples and extracting them with the Bluehawk CLI,\nyou've got code files in an output directory."),(0,r.kt)("p",null,"Now it's time to include those code blocks in your documentation.\nHow you do that depends on your documentation tooling."),(0,r.kt)("p",null,"In Realm documentation, our build system uses reStructured Text (rST), which\n",(0,r.kt)("a",{parentName:"p",href:"https://docutils.sourceforge.io/docs/ref/rst/directives.html#include"},"has an ",(0,r.kt)("inlineCode",{parentName:"a"},"include")," option"),"\nthat looks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},".. literalinclude:: /examples/generated/code/start/ReadWriteData.snippet.models.swift\n   :language: swift\n")),(0,r.kt)("p",null,"In ",(0,r.kt)("a",{parentName:"p",href:"https://docusaurus.io/docs/static-assets"},"Docusaurus"),", you would ",(0,r.kt)("inlineCode",{parentName:"p"},"import"),"\nthe file from a generated file directory and use it in a special block:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'import QuickStartTestSnippetUpdateRealmObjectDart from "!!raw-loader!@site/generated/flutter/quick_start_test.snippet.update-realm-object.dart";\n\n<CodeBlock className="language-dart">\n  {QuickStartTestSnippetUpdateRealmObjectDart}\n</CodeBlock>\n')),(0,r.kt)("p",null,"Consult your documentation tooling for the best way to include external files\nin your documentation set."))}m.isMDXComponent=!0}}]);